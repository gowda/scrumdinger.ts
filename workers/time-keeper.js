(()=>{"use strict";(()=>{const e=self;let t;const r=e=>t.speakers.length-1===e,a=()=>{t.currentSpeakerIndex+=1,t.currentSpeaker=t.speakers[t.currentSpeakerIndex],t.lastSpeaker=r(t.currentSpeakerIndex),t.statusText=t.lastSpeaker?"Last speaker":`Speaker ${t.currentSpeakerIndex+1} of ${t.speakers.length}`,e.postMessage(t)},n=()=>{r(t.currentSpeakerIndex)&&t.intervalID?(clearInterval(t.intervalID),t.intervalID=void 0):a()};e.addEventListener("message",(({data:r})=>{switch(r.action){case"start":if(!r.payload)throw new Error("DailyScrum is required for starting the timer");(({meetingInfo:{lengthInMinutes:r,theme:a},attendees:s})=>{const l=60*r,p=s.length>0?l/s.length:0;t={speakers:s,totalSpeakers:s.length,currentSpeakerIndex:0,currentSpeaker:s[0],lastSpeaker:!1,intervalID:setInterval(n,1e3*p),lengthInMinutes:r,secondsPerSpeaker:p,statusText:`Speaker 1 of ${s.length}`,theme:a},e.postMessage(t)})(r.payload);break;case"skip":a();break;case"stop":t.intervalID&&clearInterval(t.intervalID);break;default:throw new Error(`Unrecognized action ${r.action}`)}}))})()})();